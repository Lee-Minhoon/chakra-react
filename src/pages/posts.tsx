import { useGetPosts, useGetPostsByOffset } from "@/apis";
import Layout from "@/components/Layout";
import PageOptions from "@/components/PageOptions";
import Pagination from "@/components/Pagination";
import ViewOptions from "@/components/ViewOptions";
import { ViewOptionQueries } from "@/constants";
import PostsByCursor from "@/containers/posts/PostsByCursor";
import PostsTable from "@/containers/posts/PostsTable";
import { Flex } from "@chakra-ui/react";
import Head from "next/head";
import { useRouter } from "next/router";

const PostsAllPage = () => {
  const router = useRouter();
  const viewOption = router.query?.view as ViewOptionQueries;
  const page = router.query?.page ? Number(router.query?.page) : 1;
  const limit = router.query?.limit ? Number(router.query?.limit) : 10;
  const { data: posts } = useGetPosts(viewOption === ViewOptionQueries.All);
  const { data: postsByOffset } = useGetPostsByOffset(
    {
      offset: (page - 1) * limit,
      limit,
    },
    viewOption === ViewOptionQueries.Offset
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Flex direction={"column"} gap={4}>
          <Flex justifyContent={"space-between"}>
            <Flex gap={4}>
              <ViewOptions />
              <PageOptions />
            </Flex>
          </Flex>
          {viewOption === ViewOptionQueries.All && (
            <PostsTable posts={posts ?? []} />
          )}
          {viewOption === ViewOptionQueries.Offset && (
            <>
              <PostsTable posts={postsByOffset?.data ?? []} />
              <Pagination
                currentPage={page}
                limit={limit}
                total={postsByOffset?.total ?? 0}
                onChange={(page) =>
                  router.push({ query: { ...router.query, page } })
                }
              />
            </>
          )}
          {(viewOption === ViewOptionQueries.CursorButton ||
            viewOption === ViewOptionQueries.CursorObserver) && (
            <PostsByCursor
              observe={viewOption === ViewOptionQueries.CursorObserver}
            />
          )}
        </Flex>
      </Layout>
    </>
  );
};

export default PostsAllPage;
