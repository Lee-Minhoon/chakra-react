import { useGetUsers, useGetUsersByOffset } from "@/apis";
import Layout from "@/components/Layout";
import PageOptions from "@/components/PageOptions";
import Pagination from "@/components/Pagination";
import ViewOptions from "@/components/ViewOptions";
import { ViewOptionQueries } from "@/constants";
import UserCreateModal from "@/containers/users/UserCreateModal";
import UsersByCursor from "@/containers/users/UsersByCursor";
import UsersTable from "@/containers/users/UsersTable";
import UsersUtils from "@/containers/users/UsersUtils";
import { Flex, useDisclosure } from "@chakra-ui/react";
import Head from "next/head";
import { useRouter } from "next/router";

const UsersAllPage = () => {
  const { isOpen, onOpen, onClose } = useDisclosure();

  const router = useRouter();
  const viewOption = router.query?.view as ViewOptionQueries;
  const page = router.query?.page ? Number(router.query?.page) : 1;
  const limit = router.query?.limit ? Number(router.query?.limit) : 10;
  const { data: users } = useGetUsers(viewOption === ViewOptionQueries.All);
  const { data: usersByOffset } = useGetUsersByOffset(
    {
      offset: (page - 1) * limit,
      limit,
    },
    viewOption === ViewOptionQueries.Offset
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <UserCreateModal isOpen={isOpen} onClose={onClose} />
        <Flex direction={"column"} gap={4}>
          <Flex justifyContent={"space-between"}>
            <UsersUtils onCreateUser={onOpen} />
            <Flex gap={4}>
              <ViewOptions />
              <PageOptions />
            </Flex>
          </Flex>
          {viewOption === ViewOptionQueries.All && (
            <UsersTable users={users ?? []} />
          )}
          {viewOption === ViewOptionQueries.Offset && (
            <>
              <UsersTable users={usersByOffset?.data ?? []} />
              <Pagination
                currentPage={page}
                limit={limit}
                total={usersByOffset?.total ?? 0}
                onChange={(page) =>
                  router.push({ query: { ...router.query, page } })
                }
              />
            </>
          )}
          {(viewOption === ViewOptionQueries.CursorButton ||
            viewOption === ViewOptionQueries.CursorObserver) && (
            <UsersByCursor
              observe={viewOption === ViewOptionQueries.CursorObserver}
            />
          )}
        </Flex>
      </Layout>
    </>
  );
};

export default UsersAllPage;
